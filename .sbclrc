;; -*- mode: lisp -*-

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(ql:quickload 'lisp-unit)

;; for some reason lisp-unit output causes SLIME to get all messed up due to the
;; #\| it its output. So hacking around it here.
(let ((original-summarize-results
        (symbol-function 'lisp-unit:summarize-results)))
  (setf (symbol-function 'lisp-unit:summarize-results)
        (lambda (results &optional (stream *standard-output*))
          (format stream
                  (substitute
                   #\> #\|
                   (with-output-to-string (output)
                     (funcall original-summarize-results results output)))))))

(defmethod lisp-unit:print-failures :around (result &optional (stream *standard-output*))
  (format stream (substitute #\> #\|
                             (with-output-to-string (output)
                               (call-next-method result output)))))

(defmethod lisp-unit:print-errors :around (result &optional (stream *standard-output*))
  (format stream (substitute #\> #\|
                             (with-output-to-string (output)
                               (call-next-method result output)))))

(defun reset-asdf-registry ()
  (asdf:clear-source-registry)
  (asdf:ensure-source-registry nil))

(defun run-all-tests (&optional (pkg *package*))
  (lisp-unit:run-tests :all pkg))

(ql:quickload :alexandria)
(sb-ext:add-package-local-nickname :alex :alexandria)
(sb-ext:add-package-local-nickname :alex2 :alexandria-2)

(defpackage :exercism-utils
  (:use :cl)
  (:export :run-these-tests))

(in-package :exercism-utils)

(defun run-these-tests (&key (use-example-p t))
  "Runs the tests for the exercise in the currect directory. Assumes current
directory name is the SLUG of the exercise."
  (let* ((slug (first (last (pathname-directory (truename "."))))))
    (load (format nil "~A-test.lisp" slug) :verbose t)

    (when use-example-p
      (let ((example-file (find-if #'probe-file '(".meta/example.lisp" "example.lisp"))))
        (if example-file (load example-file :verbose t)
            (error 'file-does-not-exist
                   :pathname "example.lisp"
                   :message "Expected file to be in in './meta' or './'"))))

    (let* ((package (find-package (format nil "~:@(~A-test~)" slug)))
           (run-tests (find-symbol "RUN-TESTS" package)))
      (funcall run-tests))))

(in-package :cl-user)
